# EXPECTS:  <NONE>
# PROVIDES: logs_unprocessed_backup

sources:
  private_logs_backup_orginal:
    type: docker_logs
    include_containers:
      - ${BACKUP_CONTAINER_NAME:-backup}
    multiline:
      start_pattern: '^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}.[0-9]{2}'
      mode: halt_before
      condition_pattern: '^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}.[0-9]{2}'
      timeout_ms: 2000

transforms:
  private_logs_backup_stderr:
    type: filter
    inputs:
      - private_logs_backup_orginal
    condition: .stream == "stderr"

  private_logs_backup_basic:
    type: remap
    inputs:
      - private_logs_backup_stderr
    source: |-
      .namespace = "backup"

  logs_unprocessed_backup:
    type: remap
    drop_on_error: true
    inputs:
      - private_logs_backup_basic
    source: |-
      .message = strip_ansi_escape_codes!(.message)
      .parsed, err = parse_grok(.message, "%{TIMESTAMP_ISO8601:timestamp}%{SPACE}%{LOGLEVEL:level}%{SPACE}\\-%{SPACE}(?<message>(.|\r|\n)*)")

      if err == null {
        .message = .parsed.message
        .level = .parsed.level
      }

      del(.parsed)
